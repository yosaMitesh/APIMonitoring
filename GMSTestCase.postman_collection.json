{
	"info": {
		"_postman_id": "6b0e4c2b-25d0-4b5e-bdfc-ddab8d5de268",
		"name": "GMSTestCase",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30218564",
		"_collection_link": "https://blue-meteor-307436.postman.co/workspace/GMS~5dff7503-b47b-438e-ba42-d0d79b7eaf96/collection/8073917-6b0e4c2b-25d0-4b5e-bdfc-ddab8d5de268?action=share&source=collection_link&creator=30218564"
	},
	"item": [
		{
			"name": "Welcome to GMS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.data).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Message field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Status field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.be.a('string').and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Data field is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.data).to.exist.and.to.not.be.empty(\"Data field should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Count Dashboard Items",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.appointments).to.exist;",
							"  pm.expect(responseData.groupServiceTypes).to.exist;",
							"  pm.expect(responseData.serviceProviders).to.exist;",
							"  pm.expect(responseData.users).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'message' field is an empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.equal(\"\");",
							"});",
							"",
							"pm.test(\"Verify that the 'status' field is an empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.status).to.equal(\"\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/dashboard/count",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"dashboard",
						"count"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Appointment Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present in the response and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'updatedUser' field is null\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    ",
							"    responseData.data.forEach(function (item) {",
							"        pm.expect(item.updatedUser).to.be.null;",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/appointment-status",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"appointment-status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single Appointment Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the message field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the status field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the data object is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist;",
							"    pm.expect(responseData.data).to.have.all.keys('id', 'status', 'createdUser', 'updatedUser', 'createdDts', 'updatedDts');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/appointment-status/37",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"appointment-status",
						"37"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Appointment Slot",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 500\", function () {",
							"  pm.response.to.have.status(500);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.details).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.timestamp).to.exist.and.to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"Timestamp should be in valid format\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Details is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.details).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/appointment-slot",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"appointment-slot"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single Appointment Slot",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('timestamp');",
							"  pm.expect(responseData).to.have.property('message');",
							"  pm.expect(responseData).to.have.property('details');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.exist.and.to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Timestamp should be in valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Details is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.details).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/appointment-slot/55",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"appointment-slot",
						"55"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Appointment Service",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'data' array is present in the response and contains at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data).to.exist.and.to.be.an('array').with.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Check for presence of fields in response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist;",
							"    pm.expect(responseData.createdDts).to.exist;",
							"    pm.expect(responseData.createdUser).to.exist;",
							"    pm.expect(responseData.updatedDts).to.exist;",
							"    pm.expect(responseData.updatedUser).to.exist;",
							"    pm.expect(responseData.appointmentFid).to.exist;",
							"    pm.expect(responseData.serviceFid).to.exist;",
							"});",
							"",
							"pm.test(\"Verify that the 'createdUser' field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data).to.be.an('array');",
							"  ",
							"  responseData.data.forEach(function (item) {",
							"    pm.expect(item.createdUser).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/appointment-service",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"appointment-service"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single Appointment Service",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the data object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"ID is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data.id).to.be.a('number');",
							"    pm.expect(responseData.data.id).to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/appointment-service/2",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"appointment-service",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All User Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  ",
							"  const requiredFields = [\"id\", \"aboutInformation\", \"createdDts\", \"createdUser\", \"updatedDts\", \"updatedUser\", \"degreeInformation\", \"userPhotoPath\", \"userFid\"];",
							"  ",
							"  requiredFields.forEach(function(field) {",
							"    pm.expect(responseData).to.have.property(field);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"About information is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data).to.be.an('array');",
							"  ",
							"  responseData.data.forEach(function (user) {",
							"    pm.expect(user.aboutInformation).to.be.a('string').and.to.have.lengthOf.at.least(1, \"About information should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"User photo path is a valid URL\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"    ",
							"    responseData.data.forEach(function(user) {",
							"        pm.expect(user.userPhotoPath).to.match(/^https?:\\/\\/.+/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/user-profile",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"user-profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single User Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"The 'message' field should be empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Validate the status field is empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status).to.equal(\"\", \"Status field should be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'data' object is present in the response\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'id' field is a non-zero integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data).to.exist.and.to.be.an('object');",
							"  pm.expect(responseData.data.id).to.exist.and.to.be.a('number');",
							"  pm.expect(responseData.data.id).to.not.equal(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/user-profile/5",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"user-profile",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All System Setting",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify that numberHistoryAppointments is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should not be empty\");",
							"    ",
							"    responseData.data.forEach(function (item) {",
							"        pm.expect(item.numberHistoryAppointments).to.be.a('number').and.to.be.at.least(0, \"Value should be a non-negative integer\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/system-setting",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"system-setting"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single System Setting",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify that numberHistoryAppointments is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should not be empty\");",
							"    ",
							"    responseData.data.forEach(function (item) {",
							"        pm.expect(item.numberHistoryAppointments).to.be.a('number').and.to.be.at.least(0, \"Value should be a non-negative integer\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/system-setting/1",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"system-setting",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Appointment Log",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the response message field\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Validate the response status field\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.status).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present in the response and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/appointment-log",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"appointment-log"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single Appointment Log",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"The message field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'status' field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'createdDts' field is a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.createdDts).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/appointment-log/5",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"appointment-log",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present in the response and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Validate id is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    ",
							"    responseData.data.forEach(function (item) {",
							"        pm.expect(item.id).to.be.a('number');",
							"        pm.expect(item.id).to.be.at.least(0);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/address",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"address"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single Address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Address Line 1 is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.addressLine1).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Address Line 1 should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"City is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.city).to.be.a('string').and.to.have.lengthOf.at.least(1, \"City should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Pincode is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.pincode).to.be.a('number').and.to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/address/5",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"address",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Mobile number is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    ",
							"    responseData.data.forEach(function(user) {",
							"        pm.expect(user.mobileNumber).to.match(/^\\d{10}$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Verify that firstName and lastName are non-empty strings\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data).to.be.an('array');",
							"  responseData.data.forEach(function(user) {",
							"    pm.expect(user.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"firstName should not be empty\");",
							"    pm.expect(user.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"lastName should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Rating is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    ",
							"    responseData.data.forEach(function(user) {",
							"        pm.expect(user.rating).to.be.a('number');",
							"        pm.expect(user.rating).to.be.at.least(0);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/user",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Message field is present and empty\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Status field is present and empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist.and.to.equal(\"\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the data object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Mobile number is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.mobileNumber).to.match(/^\\d{10}$/, \"Mobile number should be a 10-digit number\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/user/4",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"user",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "User with Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.exist;",
							"    pm.expect(responseData.message).to.exist;",
							"    pm.expect(responseData.details).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Timestamp should be in valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Details is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.details).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/user/user-with-profile",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"user",
						"user-with-profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single User with Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.details).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"Timestamp is not in a valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Details is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.details).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/user/user-with-profile/4",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"user",
						"user-with-profile",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Count User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'message' field is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'status' field is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' field is present and is of type number\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data).to.exist;",
							"  pm.expect(responseData.data).to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' field has a value of 0\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data).to.equal(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/user/count",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"user",
						"count"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All User Settings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the response message, status, and data fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"    pm.expect(responseData.status).to.exist;",
							"    pm.expect(responseData.data).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array');",
							"});",
							"",
							"pm.test(\"Verify that the 'data' array contains the expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.have.lengthOf(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate id is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    responseData.data.forEach(function (item) {",
							"        pm.expect(item.id).to.be.a('number', 'id should be a number');",
							"        pm.expect(item.id).to.be.at.least(0, 'id should be non-negative');",
							"    });",
							"});",
							"",
							"pm.test(\"Verify that the userFid is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    responseData.data.forEach(function(item){",
							"        pm.expect(item.userFid).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/user-setting",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"user-setting"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single User Settings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the response message is empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Validate the response status is empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' object is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.have.property('data');",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'id' is a non-zero integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.id).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.data.id).to.not.equal(0, \"Value should not be zero\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/user-setting/4",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"user-setting",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All User Rating",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'message' field is empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.equal(\"\");",
							"});",
							"",
							"",
							"pm.test(\"Validate that 'status' field is empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present in the response and contains the expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.data).to.have.lengthOf(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/user-rating",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"user-rating"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single User Rating",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist;",
							"    pm.expect(responseData.data.id).to.exist;",
							"    pm.expect(responseData.data.rating).to.exist;",
							"    pm.expect(responseData.data.userFid).to.exist;",
							"    pm.expect(responseData.data.resourceFid).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Rating is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data.rating).to.be.a('number');",
							"  pm.expect(responseData.data.rating).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'message' field is an empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.message).to.be.an('string').and.to.have.lengthOf(0);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'status' field is an empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/user-rating/5",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"user-rating",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Service",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'data' array is present and not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Verify that id is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    responseData.data.forEach(function (item) {",
							"        pm.expect(item.id).to.be.a('number').and.to.satisfy((id) => id >= 0);",
							"    });",
							"});",
							"",
							"pm.test(\"Validate that serviceName is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data).to.be.an('array').and.not.to.be.empty;",
							"    ",
							"    responseData.data.forEach(function(service) {",
							"        pm.expect(service.serviceName).to.be.a('string').and.not.to.be.empty;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/service",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"service"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single Service",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the data object\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data).to.exist.and.to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Verify that serviceproviderFid is a non-zero integer\", function () {",
							"    const responseData = pm.response.json();",
							"  ",
							"    pm.expect(responseData.data.serviceproviderFid).to.be.a('number');",
							"    pm.expect(responseData.data.serviceproviderFid).to.be.above(0);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'message' field is an empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf(0);",
							"});",
							"",
							"pm.test(\"Verify that the 'status' field is an empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/service/4",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"service",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Service Service Provider",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the data object\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Service name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data[0].serviceName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Service name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Service rate is a non-negative number\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    ",
							"    responseData.data.forEach(function(service) {",
							"        pm.expect(service.serviceRate).to.be.a('number');",
							"        pm.expect(service.serviceRate).to.be.at.least(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Service subtype FID is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    const serviceSubtypeFID = responseData.data[0].serviceSubtypeFid;",
							"    ",
							"    pm.expect(serviceSubtypeFID).to.be.a('number');",
							"    pm.expect(serviceSubtypeFID).to.be.at.least(0, \"Service subtype FID should be non-negative\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/service/service-provider/7",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"service",
						"service-provider",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Service Type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'data' array is present in the response and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate id and servicetypeName for each element in the data array\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data).to.be.an('array');",
							"",
							"    responseData.data.forEach(function (element) {",
							"        pm.expect(element.id).to.be.a('number').and.to.be.at.least(0);",
							"        pm.expect(element.servicetypeName).to.be.a('string').and.to.have.lengthOf.at.least(1);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/service-type",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"service-type"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single Service Type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.servicetypeName).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data.id).to.exist.and.to.be.a('number');",
							"  pm.expect(responseData.data.id).to.be.at.least(0, \"Id should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"ServicetypeName is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.servicetypeName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Thumbnail is null or a valid image URL\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.thumbnail).to.satisfy(function (thumbnail) {",
							"    return thumbnail === null || typeof thumbnail === 'string';",
							"  }, \"Thumbnail should be null or a string\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/service-type/19",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"service-type",
						"19"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Service Sub Type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the response message field\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Validate the response status field\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present and not empty\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Validate id is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    responseData.data.forEach(function (item) {",
							"        pm.expect(item.id).to.be.a('number').and.to.be.at.least(0, \"id should be a non-negative integer\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/service-subtype",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"service-subtype"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single Service Sub Type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.subtypeName).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.serviceTypeFid).to.exist.and.to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"subtypeName is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.subtypeName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"serviceTypeFid is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.data.serviceTypeFid).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/service-subtype/4",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"service-subtype",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Service Sub Type by Service Type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response message is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Validate the response status is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'data' array is present in the response and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate id is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    ",
							"    responseData.data.forEach(function(subtype) {",
							"        pm.expect(subtype.id).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/service-subtype/service-type/4",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"service-subtype",
						"service-type",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Service Sub Type by Service Provider id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.timestamp).to.be.a('string');",
							"    pm.expect(responseData.timestamp).to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Details is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.details).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/service-subtype/service-provider/4",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"service-subtype",
						"service-provider",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Count Group Service Type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist;",
							"  pm.expect(responseData.status).to.exist;",
							"  pm.expect(responseData.data).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Data is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'message' field is empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'status' field is empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status).to.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/service-subtype/count",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"service-subtype",
						"count"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Service Provider",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate that 'data' array is present and not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.data).to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'id' field is a non-negative integer in each object of the 'data' array\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
							"",
							"  responseData.data.forEach(function (item) {",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'name' field is a non-empty string in each object of the 'data' array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    ",
							"    responseData.data.forEach(function (item) {",
							"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate that providerType field is a non-empty string in each object of data array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.data.forEach(function (obj) {",
							"        pm.expect(obj.providerType).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/service-provider",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"service-provider"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single Service Provider",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"aadharNumber is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.aadharNumber).to.be.a('string').and.to.have.lengthOf.at.least(1, \"aadharNumber should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"gstNumber is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.gstNumber).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"panNumber is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.panNumber).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/service-provider/18",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"service-provider",
						"18"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All ServiceProvider by Service Type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Provider name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data).to.exist.and.to.be.an('array');",
							"",
							"  responseData.data.forEach(function (provider) {",
							"    pm.expect(provider.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Provider name should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Subscription end date is null or in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data).to.be.an('array');",
							"",
							"  responseData.data.forEach(function(provider) {",
							"    pm.expect(provider.subscriptionEndDts).to.satisfy(function(date) {",
							"      return date === null || (typeof date === 'string' && new Date(date) !== 'Invalid Date');",
							"    }, \"Invalid date format\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Denial reasons is null or an array\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data).to.be.an('array');",
							"  ",
							"  responseData.data.forEach(function(item) {",
							"    pm.expect(item.denialReasons).to.satisfy(function (value) {",
							"      return value === null || Array.isArray(value);",
							"    }, \"Denial reasons should be null or an array\");",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/service-provider/service-type/4",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"service-provider",
						"service-type",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read ServiceProvider with details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.details).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Timestamp should be in valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Details is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.details).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/service-provider/details/4",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"service-provider",
						"details",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Count ServiceProvider",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'message' field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'status' field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' field is an integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data).to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' field is equal to 0\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.equal(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/service-provider/count",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"service-provider",
						"count"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Service Provider Slot",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify the presence and number of elements in the 'data' array\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data).to.exist.and.to.be.an('array');",
							"  pm.expect(responseData.data).to.have.lengthOf(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/service-provider-slot",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"service-provider-slot"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single ServiceProvider Slot",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the data object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"  ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.id).to.be.a('number');",
							"    pm.expect(responseData.data.id).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"AllowedAppointments is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data.allowedAppointments).to.be.a('number');",
							"    pm.expect(responseData.data.allowedAppointments).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"endTime is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.endTime).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"endTime should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/service-provider-slot/6",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"service-provider-slot",
						"6"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All ServiceProvider Setting",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 500\", function () {",
							"  pm.expect(pm.response.code).to.equal(500);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.path).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Timestamp format is not valid\");",
							"});",
							"",
							"",
							"pm.test(\"Error message is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.error).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Path is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.path).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}/gms/service-provider-setting",
					"host": [
						"{{urlendpoint}}"
					],
					"path": [
						"gms",
						"service-provider-setting"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single ServiceProvider Setting",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 500\", function () {",
							"  pm.response.to.have.status(500);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.path).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"Timestamp is not in a valid format\");",
							"});",
							"",
							"",
							"pm.test(\"Error message is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.error).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Path is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.path).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}/gms/service-provider-setting/4",
					"host": [
						"{{urlendpoint}}"
					],
					"path": [
						"gms",
						"service-provider-setting",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All ServiceProvider Rating",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the response message field\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Validate the response status field\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.status).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Verify the presence of 'data' array in the response\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.data).to.have.lengthOf(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/service-provider-rating",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"service-provider-rating"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single ServiceProvider Rating",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the data object\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data).to.exist.and.to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Rating is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.rating).to.be.a('number');",
							"    pm.expect(responseData.data.rating).to.be.at.least(0, \"Rating should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"serviceproviderFid is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.serviceproviderFid).to.be.a('number');",
							"    pm.expect(responseData.data.serviceproviderFid).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"userFid is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.userFid).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.data.userFid).to.be.at.least(0, \"userFid should be a non-negative integer\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/service-provider-rating/4",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"service-provider-rating",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Role",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.details).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Timestamp is not in a valid format\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Details is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.details).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/role",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single Role",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"  pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.timestamp).to.exist;",
							"  pm.expect(responseData.message).to.exist;",
							"  pm.expect(responseData.details).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Timestamp is not in a valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/role/5",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"role",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the response message\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Validate the response status\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.data).to.have.lengthOf.at.least(1, \"'data' array should contain at least one element\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/resource",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"resource"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single Resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"  });",
							"",
							"",
							"pm.test(\"Validate the 'data' object\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.data).to.exist.and.to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Verify that the id is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data.id).to.be.a('number');",
							"    pm.expect(responseData.data.id).to.be.at.least(0, \"Value should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"The 'available' field should be a boolean\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.available).to.be.a('boolean');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/resource/2",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"resource",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Resource Rating",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"  pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.details).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date-time format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Timestamp is not in a valid date-time format\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Details is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.details).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/resource-rating",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"resource-rating"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single Resource Rating",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.details).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Timestamp should be in a valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Details is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.details).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/resource-rating/3",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"resource-rating",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Resource Availability",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'message' field is empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'status' field is empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.status).to.equal(\"\");",
							"});",
							"",
							"",
							"pm.test(\"Verify presence of 'data' array in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array');",
							"});",
							"",
							"pm.test(\"Verify number of elements in 'data' array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.have.lengthOf(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/resource-availability",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"resource-availability"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single Resource Availability",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the data object\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data).to.exist.and.to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"ID is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data.id).to.be.a('number');",
							"  pm.expect(responseData.data.id).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Test if 'available' is a boolean value\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.available).to.be.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"Day is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data.day).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/resource-availability/2",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"resource-availability",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Resource Availability by Resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.details).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Timestamp should be in valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Details is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.details).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/resource-availability/resource/2",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"resource-availability",
						"resource",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read ALL FAQ",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"  pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.details).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Timestamp is not in a valid format\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Details is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.details).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/faq",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"faq"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single FAQ",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"  pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.details).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"Timestamp is not in a valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Details is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.details).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/faq/5",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"faq",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Desgination",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'message' field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'status' field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present in the response and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Each element in the 'data' array has a non-zero 'id'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.data.forEach(function (element) {",
							"        pm.expect(element.id).to.be.a('number').that.is.above(0);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/designation",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"designation"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single Desgination",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.serviceproviderFid).to.exist.and.to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'id' is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist;",
							"    pm.expect(responseData.data.id).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.data.id).to.be.at.least(0, \"'id' should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'name' is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that serviceproviderFid is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('object');",
							"    pm.expect(responseData.data.serviceproviderFid).to.be.a('number');",
							"    pm.expect(responseData.data.serviceproviderFid).to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/designation/6",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"designation",
						"6"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Designation by ServiceProvider ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate that the response message field is empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.exist.and.to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Validate the response status field is empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status).to.equal(\"\");",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'data' array is present in the response and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Each element in the 'data' array has a non-zero 'id' and a non-empty 'name' field\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
							"",
							"  responseData.data.forEach(function (element) {",
							"    pm.expect(element.id).to.be.above(0, \"ID should be non-zero\");",
							"    pm.expect(element.name).to.exist.and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/designation/service-provider/6",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"designation",
						"service-provider",
						"6"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Denial Reason",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist;",
							"  pm.expect(responseData.status).to.exist;",
							"  pm.expect(responseData.data).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Name field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should not be empty\");",
							"  ",
							"  responseData.data.forEach(function (item) {",
							"    pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Verify that serviceproviderFid is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
							"    responseData.data.forEach(function (item) {",
							"        pm.expect(item.serviceproviderFid).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/denial-reason",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"denial-reason"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single Denial Reason",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the data object\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.data.id).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.data.name).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.data.serviceproviderFid).to.exist.and.to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'id' field is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.id).to.be.a('number');",
							"    pm.expect(responseData.data.id).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'name' field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that serviceproviderFid is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('object');",
							"    pm.expect(responseData.data.serviceproviderFid).to.be.a('number');",
							"    pm.expect(responseData.data.serviceproviderFid).to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/denial-reason/2",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"denial-reason",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Denial reason by ServiceProvider ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the response message field\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Validate the response status field\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Verify the presence and length of the 'data' array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.data).to.have.lengthOf(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate that id and serviceproviderFid fields are non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.data.forEach(function (item) {",
							"        pm.expect(item.id).to.be.a('number').that.is.at.least(0);",
							"        pm.expect(item.serviceproviderFid).to.be.a('number').that.is.at.least(0);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/denial-reason/service-provider/6",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"denial-reason",
						"service-provider",
						"6"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Default Service",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - timestamp, message, and details\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.details).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Timestamp should be in valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Details is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.details).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/default-service",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"default-service"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single Default Service",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - timestamp, message, and details\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.details).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Timestamp is not in a valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Details is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.details).to.exist.and.to.be.a('string').and.to.have.length.above(0, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/default-service/6",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"default-service",
						"6"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Default Service SubType",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.exist;",
							"    pm.expect(responseData.message).to.exist;",
							"    pm.expect(responseData.details).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Invalid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Details is a non-empty string\", function () {",
							"   const responseData = pm.response.json();",
							"   ",
							"   pm.expect(responseData.details).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/default-service-subtype",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"default-service-subtype"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single Default Service SubType",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.details).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Timestamp is not in a valid format\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Details is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.details).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/default-service-subtype/6",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"default-service-subtype",
						"6"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Default Designation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"  pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.details).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.exist.and.to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Timestamp should be in valid format\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Details is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.details).to.exist.and.to.be.a(\"string\").and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/default-designation",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"default-designation"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single Default Designation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.details).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Timestamp is not in valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Details is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.details).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/default-designation/4",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"default-designation",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All default denial reason",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
							"",
							"  responseData.data.forEach(function (item) {",
							"    pm.expect(item).to.have.property('id');",
							"    pm.expect(item).to.have.property('reason');",
							"    pm.expect(item).to.have.property('serviceSubtypeFid');",
							"    pm.expect(item).to.have.property('serviceTypeFid');",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Reason is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data).to.be.an('array');",
							"  responseData.data.forEach(function(item) {",
							"    pm.expect(item.reason).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Reason should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present in the response and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/default-denial-reason",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"default-denial-reason"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single Default denial reason",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'reason' field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.reason).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'serviceSubtypeFid' field is a non-negative integer\", function() {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data.serviceSubtypeFid).to.be.a('number');",
							"    pm.expect(responseData.data.serviceSubtypeFid).to.be.at.least(0, \"Value should be non-negative\");",
							"});",
							"",
							"pm.test(\"Validate that the 'message' field is an empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf(0);",
							"});",
							"",
							"pm.test(\"Validate that the 'status' field is an empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/default-denial-reason/2",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"default-denial-reason",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Default denial reason by service provider id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.details).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$/, \"Timestamp is not in a valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Details is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.details).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/default-denial-reason/service-provider/2",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"default-denial-reason",
						"service-provider",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Branch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present in the response\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data).to.exist.and.to.be.an('array');",
							"  pm.expect(responseData.data).to.have.lengthOf(1);",
							"});",
							"",
							"",
							"pm.test(\"Pincode is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.data).to.be.an('array');",
							"  responseData.data.forEach(function (branch) {",
							"    pm.expect(branch.pincode).to.be.a('number');",
							"    pm.expect(branch.pincode).to.be.at.least(0, \"Pincode should be non-negative\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Country is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data[0].country).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/branch",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"branch"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single Branch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the data object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Branch name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.branchName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Branch name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Address lines are non-empty strings\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data.addressLine1).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Address line 1 should not be empty\");",
							"  pm.expect(responseData.data.addressLine2).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Address line 2 should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Pincode is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.pincode).to.be.a('number').and.to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/branch/21",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"branch",
						"21"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Branch by service provider id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'data' array is present in the response and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate id is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array');",
							"",
							"    responseData.data.forEach(function (item) {",
							"        pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});",
							"",
							"pm.test(\"Verify that the 'addressLine1' is present\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"",
							"  responseData.data.forEach(function (item) {",
							"    pm.expect(item.addressLine1).to.exist.and.to.be.a('string');",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/branch/service-provider/11",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"branch",
						"service-provider",
						"11"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read All Appointment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.details).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.timestamp).to.exist.and.to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Timestamp is not in a valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Details is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.details).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/appointment",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"appointment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Single Appointment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - timestamp, message, and details\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.details).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Timestamp should be in valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Details is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.details).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/appointment/5",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"appointment",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Count Appointment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Message field is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Status field is present in the response\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.status).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Data field is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('data');",
							"});",
							"",
							"",
							"pm.test(\"Data field is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data).to.be.a('number');",
							"    pm.expect(responseData.data).to.be.at.least(0, \"Data field should be non-negative\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlendpoint}}gms/appointment/count",
					"host": [
						"{{urlendpoint}}gms"
					],
					"path": [
						"appointment",
						"count"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "{{{{urlendpoint}}}}",
			"value": "https://136.233.179.246/",
			"disabled": true
		}
	]
}